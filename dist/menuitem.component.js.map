{"version":3,"file":"menuitem.component.js","sourceRoot":"","sources":["../src/menuitem.component.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACtD,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AACzC,OAAO,cAAc,MAAM,mBAAmB,CAAC;AAC/C,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AAGpE,IAAa,QAAQ,GAArB,MAAa,QAAS,SAAQ,IAAI;IAAlC;;QAGqC,UAAK,GAAW,EAAE,CAAC;QACnB,SAAI,GAAW,EAAE,CAAC;QACjB,YAAO,GAAY,KAAK,CAAC;QACzB,aAAQ,GAAY,KAAK,CAAC;QAC1B,aAAQ,GAAY,KAAK,CAAC;QAC1B,iBAAY,GAAY,KAAK,CAAC;IAyBpE,CAAC;IAvBW,WAAW,CAAC,CAAM;QAC1B,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC/B,IAAI,YAAY,GAAG,IAAI,WAAW,CAAC,WAAW,EAAE;YAC9C,MAAM,EAAE;gBACN,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACxB;YACD,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IACnC,CAAC;IAES,mBAAmB,CAAC,CAAM,IAAI,CAAC;IAG/B,MAAM;QACd,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACnC;aAAM;YACL,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChC;IACH,CAAC;CACF,CAAA;AAhCe,wBAAe,GAAG,cAAc,CAAC;AAEnB;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;uCAA2B;AAC1B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;sCAA0B;AACxB;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;yCAAiC;AAChC;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;0CAAkC;AACjC;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;0CAAkC;AACjC;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;8CAAsC;AARvD,QAAQ;IADpB,aAAa,CAAC,aAAa,CAAC;GAChB,QAAQ,CAiCpB;SAjCY,QAAQ","sourcesContent":["import { customElement, property } from 'lit-element';\r\nimport { Base } from '@spectrum/sp-base';\r\nimport menuitemStyles from './menuitem.styles';\r\nimport { dividerTemplate, itemTemplate } from './menuitem.template';\r\n\r\n@customElement('sp-menuitem')\r\nexport class MenuItem extends Base {\r\n  public static componentStyles = menuitemStyles;\r\n\r\n  @property({ type: String }) public label: string = '';\r\n  @property({ type: String }) public icon: string = '';\r\n  @property({ type: Boolean }) public divider: boolean = false;\r\n  @property({ type: Boolean }) public disabled: boolean = false;\r\n  @property({ type: Boolean }) public selected: boolean = false;\r\n  @property({ type: Boolean }) public unselectable: boolean = false;\r\n\r\n  protected handleClick(e: any) {\r\n    this.selected = !this.selected;\r\n    let changedEvent = new CustomEvent('itemclick', {\r\n      detail: {\r\n        label: this.label,\r\n        selected: this.selected\r\n      },\r\n      bubbles: true,\r\n      composed: true\r\n    });\r\n    this.dispatchEvent(changedEvent);\r\n  }\r\n\r\n  protected handleDisabledClick(e: any) { }\r\n\r\n\r\n  protected render() {\r\n    if (this.divider) {\r\n      return dividerTemplate.call(this);\r\n    } else {\r\n      return itemTemplate.call(this);\r\n    }\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'sp-menuitem': MenuItem;\r\n  }\r\n}\r\n"]}